/*
 * This file is generated by jOOQ.
 */
package com.recipe.application.jooq.tables;


import com.recipe.application.jooq.DefaultSchema;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecipeCategory extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>RECIPE_CATEGORY</code>
     */
    public static final RecipeCategory RECIPE_CATEGORY = new RecipeCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>RECIPE_CATEGORY.RECIPE_ID</code>.
     */
    public final TableField<Record, Long> RECIPE_ID = createField(DSL.name("RECIPE_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>RECIPE_CATEGORY.CATEGORY_ID</code>.
     */
    public final TableField<Record, Long> CATEGORY_ID = createField(DSL.name("CATEGORY_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private RecipeCategory(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private RecipeCategory(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>RECIPE_CATEGORY</code> table reference
     */
    public RecipeCategory(String alias) {
        this(DSL.name(alias), RECIPE_CATEGORY);
    }

    /**
     * Create an aliased <code>RECIPE_CATEGORY</code> table reference
     */
    public RecipeCategory(Name alias) {
        this(alias, RECIPE_CATEGORY);
    }

    /**
     * Create a <code>RECIPE_CATEGORY</code> table reference
     */
    public RecipeCategory() {
        this(DSL.name("RECIPE_CATEGORY"), null);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Internal.createUniqueKey(RecipeCategory.RECIPE_CATEGORY, DSL.name("CONSTRAINT_D"), new TableField[] { RecipeCategory.RECIPE_CATEGORY.RECIPE_ID, RecipeCategory.RECIPE_CATEGORY.CATEGORY_ID }, true);
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(
              Internal.createUniqueKey(RecipeCategory.RECIPE_CATEGORY, DSL.name("CONSTRAINT_D"), new TableField[] { RecipeCategory.RECIPE_CATEGORY.RECIPE_ID, RecipeCategory.RECIPE_CATEGORY.CATEGORY_ID }, true)
        );
    }

    @Override
    public RecipeCategory as(String alias) {
        return new RecipeCategory(DSL.name(alias), this);
    }

    @Override
    public RecipeCategory as(Name alias) {
        return new RecipeCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RecipeCategory rename(String name) {
        return new RecipeCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecipeCategory rename(Name name) {
        return new RecipeCategory(name, null);
    }
}
