/*
 * This file is generated by jOOQ.
 */
package guru.springframework.jooq.tables;


import guru.springframework.jooq.DefaultSchema;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Recipe extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>RECIPE</code>
     */
    public static final Recipe RECIPE = new Recipe();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>RECIPE.ID</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>RECIPE.COOK_TIME</code>.
     */
    public final TableField<Record, Integer> COOK_TIME = createField(DSL.name("COOK_TIME"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>RECIPE.DESCRIPTION</code>.
     */
    public final TableField<Record, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>RECIPE.DIFFICULTY</code>.
     */
    public final TableField<Record, String> DIFFICULTY = createField(DSL.name("DIFFICULTY"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>RECIPE.DIRECTIONS</code>.
     */
    public final TableField<Record, String> DIRECTIONS = createField(DSL.name("DIRECTIONS"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>RECIPE.IMAGE</code>.
     */
    public final TableField<Record, byte[]> IMAGE = createField(DSL.name("IMAGE"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>RECIPE.PREP_TIME</code>.
     */
    public final TableField<Record, Integer> PREP_TIME = createField(DSL.name("PREP_TIME"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>RECIPE.SERVINGS</code>.
     */
    public final TableField<Record, Integer> SERVINGS = createField(DSL.name("SERVINGS"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>RECIPE.SOURCE</code>.
     */
    public final TableField<Record, String> SOURCE = createField(DSL.name("SOURCE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>RECIPE.URL</code>.
     */
    public final TableField<Record, String> URL = createField(DSL.name("URL"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>RECIPE.NOTES_ID</code>.
     */
    public final TableField<Record, Long> NOTES_ID = createField(DSL.name("NOTES_ID"), SQLDataType.BIGINT, this, "");

    private Recipe(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Recipe(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>RECIPE</code> table reference
     */
    public Recipe(String alias) {
        this(DSL.name(alias), RECIPE);
    }

    /**
     * Create an aliased <code>RECIPE</code> table reference
     */
    public Recipe(Name alias) {
        this(alias, RECIPE);
    }

    /**
     * Create a <code>RECIPE</code> table reference
     */
    public Recipe() {
        this(DSL.name("RECIPE"), null);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<Record, Long> getIdentity() {
        return (Identity<Record, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Internal.createUniqueKey(Recipe.RECIPE, DSL.name("CONSTRAINT_8"), new TableField[] { Recipe.RECIPE.ID }, true);
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(
              Internal.createUniqueKey(Recipe.RECIPE, DSL.name("CONSTRAINT_8"), new TableField[] { Recipe.RECIPE.ID }, true)
        );
    }

    @Override
    public Recipe as(String alias) {
        return new Recipe(DSL.name(alias), this);
    }

    @Override
    public Recipe as(Name alias) {
        return new Recipe(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Recipe rename(String name) {
        return new Recipe(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Recipe rename(Name name) {
        return new Recipe(name, null);
    }
}
