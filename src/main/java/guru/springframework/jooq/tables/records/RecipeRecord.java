/*
 * This file is generated by jOOQ.
 */
package guru.springframework.jooq.tables.records;


import guru.springframework.jooq.tables.Recipe;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecipeRecord extends UpdatableRecordImpl<RecipeRecord> implements Record11<Long, Integer, String, String, String, byte[], Integer, Integer, String, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>RECIPE.ID</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>RECIPE.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>RECIPE.COOK_TIME</code>.
     */
    public void setCookTime(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>RECIPE.COOK_TIME</code>.
     */
    public Integer getCookTime() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>RECIPE.DESCRIPTION</code>.
     */
    public void setDescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>RECIPE.DESCRIPTION</code>.
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>RECIPE.DIFFICULTY</code>.
     */
    public void setDifficulty(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>RECIPE.DIFFICULTY</code>.
     */
    public String getDifficulty() {
        return (String) get(3);
    }

    /**
     * Setter for <code>RECIPE.DIRECTIONS</code>.
     */
    public void setDirections(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>RECIPE.DIRECTIONS</code>.
     */
    public String getDirections() {
        return (String) get(4);
    }

    /**
     * Setter for <code>RECIPE.IMAGE</code>.
     */
    public void setImage(byte[] value) {
        set(5, value);
    }

    /**
     * Getter for <code>RECIPE.IMAGE</code>.
     */
    public byte[] getImage() {
        return (byte[]) get(5);
    }

    /**
     * Setter for <code>RECIPE.PREP_TIME</code>.
     */
    public void setPrepTime(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>RECIPE.PREP_TIME</code>.
     */
    public Integer getPrepTime() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>RECIPE.SERVINGS</code>.
     */
    public void setServings(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>RECIPE.SERVINGS</code>.
     */
    public Integer getServings() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>RECIPE.SOURCE</code>.
     */
    public void setSource(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>RECIPE.SOURCE</code>.
     */
    public String getSource() {
        return (String) get(8);
    }

    /**
     * Setter for <code>RECIPE.URL</code>.
     */
    public void setUrl(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>RECIPE.URL</code>.
     */
    public String getUrl() {
        return (String) get(9);
    }

    /**
     * Setter for <code>RECIPE.NOTES_ID</code>.
     */
    public void setNotesId(Long value) {
        set(10, value);
    }

    /**
     * Getter for <code>RECIPE.NOTES_ID</code>.
     */
    public Long getNotesId() {
        return (Long) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Integer, String, String, String, byte[], Integer, Integer, String, String, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<Long, Integer, String, String, String, byte[], Integer, Integer, String, String, Long> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Recipe.RECIPE.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Recipe.RECIPE.COOK_TIME;
    }

    @Override
    public Field<String> field3() {
        return Recipe.RECIPE.DESCRIPTION;
    }

    @Override
    public Field<String> field4() {
        return Recipe.RECIPE.DIFFICULTY;
    }

    @Override
    public Field<String> field5() {
        return Recipe.RECIPE.DIRECTIONS;
    }

    @Override
    public Field<byte[]> field6() {
        return Recipe.RECIPE.IMAGE;
    }

    @Override
    public Field<Integer> field7() {
        return Recipe.RECIPE.PREP_TIME;
    }

    @Override
    public Field<Integer> field8() {
        return Recipe.RECIPE.SERVINGS;
    }

    @Override
    public Field<String> field9() {
        return Recipe.RECIPE.SOURCE;
    }

    @Override
    public Field<String> field10() {
        return Recipe.RECIPE.URL;
    }

    @Override
    public Field<Long> field11() {
        return Recipe.RECIPE.NOTES_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getCookTime();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public String component4() {
        return getDifficulty();
    }

    @Override
    public String component5() {
        return getDirections();
    }

    @Override
    public byte[] component6() {
        return getImage();
    }

    @Override
    public Integer component7() {
        return getPrepTime();
    }

    @Override
    public Integer component8() {
        return getServings();
    }

    @Override
    public String component9() {
        return getSource();
    }

    @Override
    public String component10() {
        return getUrl();
    }

    @Override
    public Long component11() {
        return getNotesId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getCookTime();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public String value4() {
        return getDifficulty();
    }

    @Override
    public String value5() {
        return getDirections();
    }

    @Override
    public byte[] value6() {
        return getImage();
    }

    @Override
    public Integer value7() {
        return getPrepTime();
    }

    @Override
    public Integer value8() {
        return getServings();
    }

    @Override
    public String value9() {
        return getSource();
    }

    @Override
    public String value10() {
        return getUrl();
    }

    @Override
    public Long value11() {
        return getNotesId();
    }

    @Override
    public RecipeRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public RecipeRecord value2(Integer value) {
        setCookTime(value);
        return this;
    }

    @Override
    public RecipeRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public RecipeRecord value4(String value) {
        setDifficulty(value);
        return this;
    }

    @Override
    public RecipeRecord value5(String value) {
        setDirections(value);
        return this;
    }

    @Override
    public RecipeRecord value6(byte[] value) {
        setImage(value);
        return this;
    }

    @Override
    public RecipeRecord value7(Integer value) {
        setPrepTime(value);
        return this;
    }

    @Override
    public RecipeRecord value8(Integer value) {
        setServings(value);
        return this;
    }

    @Override
    public RecipeRecord value9(String value) {
        setSource(value);
        return this;
    }

    @Override
    public RecipeRecord value10(String value) {
        setUrl(value);
        return this;
    }

    @Override
    public RecipeRecord value11(Long value) {
        setNotesId(value);
        return this;
    }

    @Override
    public RecipeRecord values(Long value1, Integer value2, String value3, String value4, String value5, byte[] value6, Integer value7, Integer value8, String value9, String value10, Long value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RecipeRecord
     */
    public RecipeRecord() {
        super(Recipe.RECIPE);
    }

    /**
     * Create a detached, initialised RecipeRecord
     */
    public RecipeRecord(Long id, Integer cookTime, String description, String difficulty, String directions, byte[] image, Integer prepTime, Integer servings, String source, String url, Long notesId) {
        super(Recipe.RECIPE);

        setId(id);
        setCookTime(cookTime);
        setDescription(description);
        setDifficulty(difficulty);
        setDirections(directions);
        setImage(image);
        setPrepTime(prepTime);
        setServings(servings);
        setSource(source);
        setUrl(url);
        setNotesId(notesId);
    }
}
