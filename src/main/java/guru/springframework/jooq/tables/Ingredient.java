/*
 * This file is generated by jOOQ.
 */
package guru.springframework.jooq.tables;


import guru.springframework.jooq.DefaultSchema;
import guru.springframework.jooq.Keys;
import guru.springframework.jooq.tables.records.IngredientRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ingredient extends TableImpl<IngredientRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>INGREDIENT</code>
     */
    public static final Ingredient INGREDIENT = new Ingredient();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IngredientRecord> getRecordType() {
        return IngredientRecord.class;
    }

    /**
     * The column <code>INGREDIENT.ID</code>.
     */
    public final TableField<IngredientRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>INGREDIENT.AMOUNT</code>.
     */
    public final TableField<IngredientRecord, BigDecimal> AMOUNT = createField(DSL.name("AMOUNT"), SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column <code>INGREDIENT.DESCRIPTION</code>.
     */
    public final TableField<IngredientRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>INGREDIENT.RECIPE_ID</code>.
     */
    public final TableField<IngredientRecord, Long> RECIPE_ID = createField(DSL.name("RECIPE_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>INGREDIENT.UOM_ID</code>.
     */
    public final TableField<IngredientRecord, Long> UOM_ID = createField(DSL.name("UOM_ID"), SQLDataType.BIGINT, this, "");

    private Ingredient(Name alias, Table<IngredientRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ingredient(Name alias, Table<IngredientRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>INGREDIENT</code> table reference
     */
    public Ingredient(String alias) {
        this(DSL.name(alias), INGREDIENT);
    }

    /**
     * Create an aliased <code>INGREDIENT</code> table reference
     */
    public Ingredient(Name alias) {
        this(alias, INGREDIENT);
    }

    /**
     * Create a <code>INGREDIENT</code> table reference
     */
    public Ingredient() {
        this(DSL.name("INGREDIENT"), null);
    }

    public <O extends Record> Ingredient(Table<O> child, ForeignKey<O, IngredientRecord> key) {
        super(child, key, INGREDIENT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<IngredientRecord, Long> getIdentity() {
        return (Identity<IngredientRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<IngredientRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1;
    }

    @Override
    public List<UniqueKey<IngredientRecord>> getKeys() {
        return Arrays.<UniqueKey<IngredientRecord>>asList(Keys.CONSTRAINT_1);
    }

    @Override
    public List<ForeignKey<IngredientRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IngredientRecord, ?>>asList(Keys.FKJ0S4YWMQQQW4H5IOMMIGH5YJA, Keys.FK6IV5L89QMITEDN5M2A71KTA2T);
    }

    public Recipe recipe() {
        return new Recipe(this, Keys.FKJ0S4YWMQQQW4H5IOMMIGH5YJA);
    }

    public UnitOfMeasure unitOfMeasure() {
        return new UnitOfMeasure(this, Keys.FK6IV5L89QMITEDN5M2A71KTA2T);
    }

    @Override
    public Ingredient as(String alias) {
        return new Ingredient(DSL.name(alias), this);
    }

    @Override
    public Ingredient as(Name alias) {
        return new Ingredient(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ingredient rename(String name) {
        return new Ingredient(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ingredient rename(Name name) {
        return new Ingredient(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, BigDecimal, String, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
