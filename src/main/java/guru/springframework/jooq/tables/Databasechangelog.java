/*
 * This file is generated by jOOQ.
 */
package guru.springframework.jooq.tables;


import guru.springframework.jooq.SpringGuruRecipe;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Databasechangelog extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spring_guru_recipe.databasechangelog</code>
     */
    public static final Databasechangelog DATABASECHANGELOG = new Databasechangelog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>spring_guru_recipe.databasechangelog.ID</code>.
     */
    public final TableField<Record, String> ID = createField(DSL.name("ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>spring_guru_recipe.databasechangelog.AUTHOR</code>.
     */
    public final TableField<Record, String> AUTHOR = createField(DSL.name("AUTHOR"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>spring_guru_recipe.databasechangelog.FILENAME</code>.
     */
    public final TableField<Record, String> FILENAME = createField(DSL.name("FILENAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>spring_guru_recipe.databasechangelog.DATEEXECUTED</code>.
     */
    public final TableField<Record, LocalDateTime> DATEEXECUTED = createField(DSL.name("DATEEXECUTED"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>spring_guru_recipe.databasechangelog.ORDEREXECUTED</code>.
     */
    public final TableField<Record, Integer> ORDEREXECUTED = createField(DSL.name("ORDEREXECUTED"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>spring_guru_recipe.databasechangelog.EXECTYPE</code>.
     */
    public final TableField<Record, String> EXECTYPE = createField(DSL.name("EXECTYPE"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>spring_guru_recipe.databasechangelog.MD5SUM</code>.
     */
    public final TableField<Record, String> MD5SUM = createField(DSL.name("MD5SUM"), SQLDataType.VARCHAR(35), this, "");

    /**
     * The column <code>spring_guru_recipe.databasechangelog.DESCRIPTION</code>.
     */
    public final TableField<Record, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>spring_guru_recipe.databasechangelog.COMMENTS</code>.
     */
    public final TableField<Record, String> COMMENTS = createField(DSL.name("COMMENTS"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>spring_guru_recipe.databasechangelog.TAG</code>.
     */
    public final TableField<Record, String> TAG = createField(DSL.name("TAG"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>spring_guru_recipe.databasechangelog.LIQUIBASE</code>.
     */
    public final TableField<Record, String> LIQUIBASE = createField(DSL.name("LIQUIBASE"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>spring_guru_recipe.databasechangelog.CONTEXTS</code>.
     */
    public final TableField<Record, String> CONTEXTS = createField(DSL.name("CONTEXTS"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>spring_guru_recipe.databasechangelog.LABELS</code>.
     */
    public final TableField<Record, String> LABELS = createField(DSL.name("LABELS"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>spring_guru_recipe.databasechangelog.DEPLOYMENT_ID</code>.
     */
    public final TableField<Record, String> DEPLOYMENT_ID = createField(DSL.name("DEPLOYMENT_ID"), SQLDataType.VARCHAR(10), this, "");

    private Databasechangelog(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Databasechangelog(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spring_guru_recipe.databasechangelog</code> table reference
     */
    public Databasechangelog(String alias) {
        this(DSL.name(alias), DATABASECHANGELOG);
    }

    /**
     * Create an aliased <code>spring_guru_recipe.databasechangelog</code> table reference
     */
    public Databasechangelog(Name alias) {
        this(alias, DATABASECHANGELOG);
    }

    /**
     * Create a <code>spring_guru_recipe.databasechangelog</code> table reference
     */
    public Databasechangelog() {
        this(DSL.name("databasechangelog"), null);
    }

    @Override
    public Schema getSchema() {
        return SpringGuruRecipe.SPRING_GURU_RECIPE;
    }

    @Override
    public Databasechangelog as(String alias) {
        return new Databasechangelog(DSL.name(alias), this);
    }

    @Override
    public Databasechangelog as(Name alias) {
        return new Databasechangelog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Databasechangelog rename(String name) {
        return new Databasechangelog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Databasechangelog rename(Name name) {
        return new Databasechangelog(name, null);
    }
}
