/*
 * This file is generated by jOOQ.
 */
package guru.springframework.jooq.tables;


import guru.springframework.jooq.DefaultSchema;
import guru.springframework.jooq.Keys;
import guru.springframework.jooq.tables.records.UnitOfMeasureRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UnitOfMeasure extends TableImpl<UnitOfMeasureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>UNIT_OF_MEASURE</code>
     */
    public static final UnitOfMeasure UNIT_OF_MEASURE = new UnitOfMeasure();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UnitOfMeasureRecord> getRecordType() {
        return UnitOfMeasureRecord.class;
    }

    /**
     * The column <code>UNIT_OF_MEASURE.ID</code>.
     */
    public final TableField<UnitOfMeasureRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>UNIT_OF_MEASURE.DESCRIPTION</code>.
     */
    public final TableField<UnitOfMeasureRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(255), this, "");

    private UnitOfMeasure(Name alias, Table<UnitOfMeasureRecord> aliased) {
        this(alias, aliased, null);
    }

    private UnitOfMeasure(Name alias, Table<UnitOfMeasureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>UNIT_OF_MEASURE</code> table reference
     */
    public UnitOfMeasure(String alias) {
        this(DSL.name(alias), UNIT_OF_MEASURE);
    }

    /**
     * Create an aliased <code>UNIT_OF_MEASURE</code> table reference
     */
    public UnitOfMeasure(Name alias) {
        this(alias, UNIT_OF_MEASURE);
    }

    /**
     * Create a <code>UNIT_OF_MEASURE</code> table reference
     */
    public UnitOfMeasure() {
        this(DSL.name("UNIT_OF_MEASURE"), null);
    }

    public <O extends Record> UnitOfMeasure(Table<O> child, ForeignKey<O, UnitOfMeasureRecord> key) {
        super(child, key, UNIT_OF_MEASURE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<UnitOfMeasureRecord, Long> getIdentity() {
        return (Identity<UnitOfMeasureRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UnitOfMeasureRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4E;
    }

    @Override
    public List<UniqueKey<UnitOfMeasureRecord>> getKeys() {
        return Arrays.<UniqueKey<UnitOfMeasureRecord>>asList(Keys.CONSTRAINT_4E);
    }

    @Override
    public UnitOfMeasure as(String alias) {
        return new UnitOfMeasure(DSL.name(alias), this);
    }

    @Override
    public UnitOfMeasure as(Name alias) {
        return new UnitOfMeasure(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UnitOfMeasure rename(String name) {
        return new UnitOfMeasure(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UnitOfMeasure rename(Name name) {
        return new UnitOfMeasure(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
