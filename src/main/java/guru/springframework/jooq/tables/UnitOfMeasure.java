/*
 * This file is generated by jOOQ.
 */
package guru.springframework.jooq.tables;


import guru.springframework.jooq.SpringGuruRecipe;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UnitOfMeasure extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spring_guru_recipe.unit_of_measure</code>
     */
    public static final UnitOfMeasure UNIT_OF_MEASURE = new UnitOfMeasure();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>spring_guru_recipe.unit_of_measure.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>spring_guru_recipe.unit_of_measure.description</code>.
     */
    public final TableField<Record, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    private UnitOfMeasure(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private UnitOfMeasure(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spring_guru_recipe.unit_of_measure</code> table reference
     */
    public UnitOfMeasure(String alias) {
        this(DSL.name(alias), UNIT_OF_MEASURE);
    }

    /**
     * Create an aliased <code>spring_guru_recipe.unit_of_measure</code> table reference
     */
    public UnitOfMeasure(Name alias) {
        this(alias, UNIT_OF_MEASURE);
    }

    /**
     * Create a <code>spring_guru_recipe.unit_of_measure</code> table reference
     */
    public UnitOfMeasure() {
        this(DSL.name("unit_of_measure"), null);
    }

    @Override
    public Schema getSchema() {
        return SpringGuruRecipe.SPRING_GURU_RECIPE;
    }

    @Override
    public Identity<Record, Long> getIdentity() {
        return (Identity<Record, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Internal.createUniqueKey(UnitOfMeasure.UNIT_OF_MEASURE, DSL.name("KEY_unit_of_measure_PRIMARY"), new TableField[] { UnitOfMeasure.UNIT_OF_MEASURE.ID }, true);
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(
              Internal.createUniqueKey(UnitOfMeasure.UNIT_OF_MEASURE, DSL.name("KEY_unit_of_measure_PRIMARY"), new TableField[] { UnitOfMeasure.UNIT_OF_MEASURE.ID }, true)
        );
    }

    @Override
    public UnitOfMeasure as(String alias) {
        return new UnitOfMeasure(DSL.name(alias), this);
    }

    @Override
    public UnitOfMeasure as(Name alias) {
        return new UnitOfMeasure(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UnitOfMeasure rename(String name) {
        return new UnitOfMeasure(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UnitOfMeasure rename(Name name) {
        return new UnitOfMeasure(name, null);
    }
}
